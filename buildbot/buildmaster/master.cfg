# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

import logging
import copy
from TestResultStorage.settings import MEDIA_ROOT

from buildbot.changes.svnpoller import SVNPoller
from buildbot.process import factory
from buildbot.steps.python import PyFlakes
from buildbot.steps import source, shell
from buildbot.scheduler import Scheduler

# ------------------------------------- global config ---------------------------------------------

log = logging.getLogger('buildbot.master')

WAIT_BEFORE_BUILD = 1
""" How many minutes to wait before build will trigger """

c = BuildmasterConfig = {}
""" Master config passed to buildbot """

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("misc", "h2so42"),BuildSlave("zen", "h2so42")]

c['slavePortnum'] = "tcp:9989"

c['projectName'] = 'ZlomekFS'
c['projectURL'] = 'http://dsrg.mff.cuni.cz/~ceres/prj/zlomekFS'
c['buildbotURL'] = 'http://192.168.16.253:8010' 

svnurl = 'https://shiva.ms.mff.cuni.cz/svn/zzzzzfs'

# --------------------------------- helper functions and classes ----------------------------------

def split_file_branches(path):
	""" Split full file name within  
		repository to branch / file. 
	"""
	pieces = path.split('/')
	if pieces[0] == 'trunk':
		return (None, '/'.join(pieces[1:]))
	elif pieces[0] == 'branches':
		if len(pieces) > 3:
			return ('/'.join(pieces[0:3]),
				'/'.join(pieces[3:]))
		else:
			return ('/'.join(pieces[0:2]),
				'/'.join(pieces[2:]))
	else:
		return None


class DependRunner(object):
	""" Run given schedulers upon call
		used for trigger schedulers
		upon success of others.
	 """
	def __init__(self, schedulers):
		self.schedulers = schedulers
	
	def __call__(self, *arg, **kwarg):
		for scheduler in self.schedulers:
			scheduler.setTimer(0)


class MakeRpm(shell.Compile):
	""" Shell command override for making rpms. """
	descriptionDone = "rpm"
	description = "build rpm"
	
	def start(self):
		revision = self.getProperty("revision")
		if revision:
			self.setCommand(["make", "rpm", "REVISION=%s" %revision ])
		else:
			self.setCommand(["make", "rpm"])
		shell.ShellCommand.start(self)


# ------------------------ builder and scheduler default values ----------------------------

c['change_source'] = [SVNPoller (svnurl = svnurl,
                                     pollinterval = 60,
                                     split_file = split_file_branches)]

c['schedulers'] = []


c['builders'] = []

profile = {}
""" Default profile variables passed to all builders. """

branch = 'branches/zouhar'
""" Branch to fetch files by default """

slaveDesc = [('misc', '64'), ('zen', '64')]
""" Description of slaves: (name, architecture)"""

schedulers = {}
""" Dictionary of schedulers.
	Used to trigger dependent schedulers.
"""

# ------------------------- create builders and schedulers (loop) -----------------------

# create builders and schedulers for all projects
for (package, branchPath, needPyflakes, needConfigure, auxProfile) in [
	("zen-unit", "/zen-unit", False, True, {'CFLAGS':'-g3 -ggdb -O0'}),
	("syplog", "/syplog", False, True, {'CFLAGS':'-g3 -ggdb -O0'}),
	("pysyplog", "/syplog/py", True, False, None),
	("zlomekfs", "/zlomekfs", True, True, 
		{'CFLAGS':'-g3 -ggdb -O0 -DENABLE_CHECKING -DENABLE_LOCAL_PATH'}),
	("zfsd-status", "/zlomekfs/zfsd-status-py", True, False, None),
	("TestResultStorage", "/TestResultStorage", True, False, None),
	("insecticide", "/insecticide", True, False, None)
				]:
	
	schedBuilders = []
	""" List of builders for this project. """

	# each slave should have own builder
	for (slaveName, arch) in slaveDesc:
		factory_inst = factory.BuildFactory()
		# we need copy for each builder to prevent BATCHUUID collisions
		prof = copy.copy(profile)
		prof['PROJECT_NAME'] = package
		prof['BRANCH'] = branch
		prof['SLAVE_NAME'] = slaveName
		if auxProfile:
			prof.update(auxProfile)
		
		factory_inst.addStep(source.SVN(mode='update', 
				baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
				defaultBranch=branch + branchPath), env = prof)
		
		# make step is included in rpm step   
		#    factory_inst.addStep(shell.Compile, description = "make",
		#                         descriptionDone = "build", command='make all', env = prof)
		#factory_inst.addStep(shell.Compile, command='make package', description = "build package",
		#                     descriptionDone = "packaging", env = prof)
		if needConfigure:
			factory_inst.addStep(shell.Compile, description='automake',
				descriptionDone = "automake", command = 'make -f Makefile.cvs', env = prof)
			factory_inst.addStep(shell.Configure, description = "configure",
				 descriptionDone = "configure", command = "./configure --prefix=/usr", env = prof)
		
		factory_inst.addStep(MakeRpm, env = prof)
		
		factory_inst.addStep(shell.ShellCommand,
				command = 'rpm -Uvh --oldpackage build/RPMS/*/' + package + '*.rpm || [ $? = 6 ]',
				description = "install rpm", env = prof)
		
		if package != 'zlomekfs':
			# we must handle zlomekfs testing separatelly,
			#  because it uses more than one machine
			factory_inst.addStep(shell.Test, command="make test", description = "test",
				descriptionDone = "tests", env = prof)

		if needPyflakes:
			factory_inst.addStep(PyFlakes, command=["pyflakes", "."])
		
		#upload rpms
		factory_inst.addStep(shell.ShellCommand, command = "cp -rf build/RPMS/*/* " + MEDIA_ROOT,
				description = "upload rpm", env = prof)
		
		factory_inst.addStep(shell.Compile,
				command = ['make', 'clean'],
				description = 'clean', descriptionDone='cleaning', env = prof)
		
		
		builderName = 'b_zouhar_' + package + "_" + slaveName + "_" + arch
		schedBuilders.append(builderName)
		c['builders'].append(
			{'name':builderName, 
			'slavename':slaveName, 'builddir':package + "_" + slaveName + "_" + arch,
			'factory':factory_inst})
	
	# create scheduler with builders for this project
	schedInst = Scheduler("s_" + package,
                  branch + '/' + package,
                  60 * WAIT_BEFORE_BUILD,
                  schedBuilders)
	schedulers["s_" + package] = schedInst

# ------------------------ create test builder and scheduler for zlomekfs -------------------------

# profile for zlomekfs testing builder
zlomek_test_profile = copy.copy(profile)
zlomek_test_profile['PROJECT_NAME'] = 'zlomekfs'
zlomek_test_profile['BRANCH'] = branch
zlomek_test_profile['SLAVE_NAME'] = 'zen'
zlomek_test_profile['CFLAGS'] = '-g3 -ggdb -O0 -DENABLE_CHECKING -DENABLE_LOCAL_PATH'

b_zlomekfs_test = factory.BuildFactory()

b_zlomekfs_test.addStep(source.SVN(mode='update', 
	baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
	defaultBranch=branch + '/zlomekfs'), env = zlomek_test_profile)

b_zlomekfs_test.addStep(shell.Compile, description='automake',
	descriptionDone = "automake", command = 'make -f Makefile.cvs',
	env = zlomek_test_profile)

b_zlomekfs_test.addStep(shell.Configure, description = "configure",
	descriptionDone = "configure", command = "./configure --prefix=/usr",
	env = zlomek_test_profile)

b_zlomekfs_test.addStep(shell.ShellCommand,
	command = './tests/nose-tests/infiniteControl.sh pause',
	description = 'pause infinity', env = zlomek_test_profile)

b_zlomekfs_test.addStep(shell.Test, command="make test", description = "test",
	descriptionDone = "tests", env = zlomek_test_profile)

b_zlomekfs_test.addStep(shell.ShellCommand,
	command = './tests/nose-tests/infiniteControl.sh unpause',
	description = 'unpause infinity', env = zlomek_test_profile)

c['builders'].append(
	{'name':'b_zlomekfs_test', 'slavenames':['zen'], 'builddir':'b_zlomekfs_test',
	'factory':b_zlomekfs_test})


schedulers["s_zlomekfs_test"] = Scheduler("s_zlomekfs_test",
	None,
	0,
	['b_zlomekfs_test'])


# --------------- create builder and scheduler for testing buildmaster configuration ----------------

b_buildmaster_cfg = factory.BuildFactory()

b_buildmaster_cfg.addStep(source.SVN(mode='update', 
	baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
	defaultBranch='branches/zouhar/buildbot'), env = prof)

b_buildmaster_cfg.addStep(PyFlakes, command=["pyflakes", 'buildmaster/master.cfg'])


c['builders'].append(
	{'name':'b_zouhar_buildmaster_cfg', 'slavenames':['zen', 'misc'], 'builddir':'buildbot',
	'factory':b_buildmaster_cfg})

schedulers['s_zouhar_buildmaster_cfg'] = Scheduler("s_zouhar_buildmaster_cfg",
                  'branches/zouhar/buildbot',
                  60 * WAIT_BEFORE_BUILD,
                  ["b_zouhar_buildmaster_cfg"])


# ------------------------- add dependencies between schedulers ---------------------------------

schedulers['s_zen-unit'].subscribeToSuccessfulBuilds(DependRunner(
	[schedulers['s_syplog'], schedulers['s_zlomekfs']]))

schedulers['s_syplog'].subscribeToSuccessfulBuilds(DependRunner(
	[schedulers['s_zlomekfs'], schedulers['s_pysyplog']]))

schedulers['s_zlomekfs'].subscribeToSuccessfulBuilds(DependRunner(
	[schedulers['s_zfsd-status'], schedulers['s_zlomekfs_test']]))

schedulers['s_TestResultStorage'].subscribeToSuccessfulBuilds(DependRunner(
	[schedulers['s_insecticide'], schedulers['s_zlomekfs']]))



# pass schedulers to buildbot
c['schedulers'] = schedulers.values()


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.Waterfall(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

