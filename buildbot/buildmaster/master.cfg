# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['bots'] = [("vboxi386", "h2so42")]

c['slavePortnum'] = 9989

c['projectName'] = 'ZloFS'
c['projectURL'] = 'http://dsrg.mff.cuni.cz/~ceres/prj/zlomekFS'
c['buildbotURL'] = 'http://10.0.0.2:8010' 

####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

def split_file_branches(path):
    pieces = path.split('/')
    if pieces[0] == 'trunk':
        return (None, '/'.join(pieces[1:]))
    elif pieces[0] == 'branches':
        return ('/'.join(pieces[0:2]),
                '/'.join(pieces[2:]))
    else:
        return None

from buildbot.changes.svnpoller import SVNPoller

c['sources'] = [SVNPoller (svnurl = 'https://shiva.ms.mff.cuni.cz/svn/zzzzzfs',
                                     pollinterval = 600,
                                     split_file = split_file_branches)]


from buildbot.scheduler import Scheduler, Dependent
s_zouhar_syplog = Scheduler("s_zouhar-syplog",
                  'branches/zouhar/syplog',
                  5*60,
                  ["b_zouhar_syplog"])

s_zouhar_pysyplog = Dependent("s_zouhar_pysyplog", s_zouhar_syplog,
                  ["b_zouhar_pysyplog"])

s_zouhar_zen = Scheduler("s_zouhar-zen",
                  'branches/zouhar/zen-unit',
                  5*60,
                  ["b_zouhar_zen"])

s_zouhar_zen_depend = Dependent ("s_zouhar_zen_depend", s_zouhar_zen,
                  ["b_zouhar_syplog", "b_zouhar_zfs"])

'''
s_zouhar_syplog-py = Dependent("s_zouhar-syplog-py", s_zouhar_syplog,
                             ["b_zouhar-syplog-pu"])

s_zouhar_test = Dependent("zouhar-test", s_zouhar_install,
                          ["zouhar-test"])

'''

c['schedulers'] = [s_zouhar_syplog]



from buildbot.process import factory
from buildbot.steps import source, shell

c['builders'] = []

compileStep = shell.Compile(command='make all', description = "make", descriptionDone = "build")
packageStep = shell.Compile(command='make package', description = "build package", descriptionDone = "packaged")
rpmStep = shell.Compile(command='make rpm', description = "build rpm", descriptionDone = "rpm build")
cleanStep = shell.Compile(command="make clean")


syplog_factory = factory.BuildFactory()

syplog_factory.addStep(source.SVN(mode='update', 
                      baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
                      defaultBranch='branches/zouhar/syplog'))

syplog_factory.addStep(compileStep)
syplog_factory.addStep(packageStep)
syplog_factory.addStep(rpmStep)
syplog_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-Uvh', '--force', '/usr/src/redhat/RPMS/*/syplog*.rpm'],
                       description = "install rpm")

#test
'''
syplog_factory.addStep(shell.ShellCommand,
                       command = ['cp','-f', '/usr/src/redhat/RPMS/*/syplog*.rpm', "/srv/ftp/pub"],
                       description = "upload rpm")
'''
syplog_factory.addStep(shell.ShellCommand,
                       command = ['rm', '-rf', '/usr/src/redhat/RPMS/*/syplog*.rpm'],
                       description = "delete rpm")

'''
syplog_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-e', 'syplog'],
                       description = "uninstall rpm")
'''

c['builders'].append(
  {'name':'b_zouhar_syplog', 'slavename':'vboxi386', 'builddir':'syplog', 
   'factory':syplog_factory})



pysyplog_factory = factory.BuildFactory()

pysyplog_factory.addStep(source.SVN(mode='update', 
                      baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
                      defaultBranch='branches/zouhar/syplog/py'))
'''
pysyplog_factory.addStep(shell.ShellCommand, 
                         command = ["rpm", "-Uvh", "ftp://localhost/syplog-latest.rpm" ],
                         description = "install dependencies")
'''
pysyplog_factory.addStep(compileStep)
pysyplog_factory.addStep(packageStep)
pysyplog_factory.addStep(rpmStep)
syplog_factory.addStep(shell.ShellCommand,
                       command = ['rpm','-ivh', '--force', '/usr/src/redhat/RPMS/*/pysyplog*.rpm'],
                       description = "install rpm")

#test
'''
pysyplog_factory.addStep(shell.ShellCommand,
                      command = ['cp','-f', '/usr/src/redhat/RPMS/*/pysyplog*.rpm', "/srv/ftp/pub"],
                      description = "upload rpm")
'''
pysyplog_factory.addStep(shell.ShellCommand,
                       command = ['rm', '-rf', '/usr/src/redhat/RPMS/*/pysyplog*.rpm'],
                       description = "delete rpm")

'''
pysyplog_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-e', 'pysyplog'],
                       description = "uninstall rpm")
'''




c['builders'].append({'name':'b_zouhar_pysyplog', 'slavename':'vboxi386', 'builddir':'pysyplog', 
   'factory':pysyplog_factory})

zen_factory = factory.BuildFactory()

zen_factory.addStep(source.SVN(mode='update', 
                      baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
                      defaultBranch='branches/zouhar/zen-unit'))
zen_factory.addStep(compileStep)
zen_factory.addStep(packageStep)
zen_factory.addStep(rpmStep)
zen_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-Uvh', '--force', '/usr/src/redhat/RPMS/*/zen-unit*.rpm'],
                       description = "install rpm")

#test
zen_factory.addStep(shell.ShellCommand,
                       command = ['rm', '-rf', '/usr/src/redhat/RPMS/*/zen-unit*.rpm'],
                       description = "delete rpm")
zen_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-e', 'zen-unit'],
                       description = "uninstall rpm")



c['builders'].append({'name':'b_zouhar_zen', 'slavename':'vboxi386', 'builddir':'zen', 
   'factory':zen_factory})

zfs_factory = factory.BuildFactory()

zfs_factory = factory.BuildFactory()

zfs_factory.addStep(source.SVN(mode='update', 
                      baseURL='https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/', 
                      defaultBranch='branches/zouhar/zfs'))
zfs_factory.addStep(compileStep)
zfs_factory.addStep(packageStep)
zfs_factory.addStep(rpmStep)
zfs_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-Uvh', '--force', '/usr/src/redhat/RPMS/*/zlomekfs*.rpm'],
                       description = "install rpm")

#test
zfs_factory.addStep(shell.ShellCommand,
                       command = ['rm', '-rf', '/usr/src/redhat/RPMS/*/zlomekfs*.rpm'],
                       description = "delete rpm")
zfs_factory.addStep(shell.ShellCommand,
                       command = ['rpm', '-e', 'zlomekfs'],
                       description = "uninstall rpm")



c['builders'].append({'name':'b_zouhar_zfs', 'slavename':'vboxi386', 'builddir':'zfs', 
   'factory':zfs_factory})


'''
inf.addStep(exportStep)
inf.addStep(shell.ShellCommand, command = 
           ['svn', 'merge', 'https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/trunk',
            '-c', '2527'], description = ['patching'], 
           descriptionDone = ['patched'])

inf.addStep(shell.ShellCommand, command = ['make', 'install'],
           description = ['installing'], descriptionDone = ['installed'])

tf.addStep(exportStep)
tf.addStep(shell.ShellCommand, command = 
           ['svn', 'merge', 'https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/trunk',
            '-c', '2527'], description = ['patching'], 
           descriptionDone = ['patched'])

tf.addStep(shell.ShellCommand, command = ['make', 'test'],
           description = ['testing'], descriptionDone = ['tests'])

c['builders'] = [
  {'name':'zouhar-build', 'slavename':'vboxi386', 'builddir':'build', 
   'factory':bf},
  {'name':'zouhar-install', 'slavename':'vboxi386', 'builddir':'install', 
   'factory':inf},
  {'name':'zouhar-test', 'slavename':'vboxi386', 'builddir':'test', 
   'factory':tf}
 ]
'''
'''
zfs_factory.addStep(shell.ShellCommand, command = 
           ['svn', 'merge', 'https://shiva.ms.mff.cuni.cz/svn/zzzzzfs/trunk',
            '-c', '2527'], description = ['patching'], 
           descriptionDone = ['patched'])
'''

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.Waterfall(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

